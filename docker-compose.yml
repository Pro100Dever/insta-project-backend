version: "3.9" # Версия формата docker-compose файла, 3.9 — одна из последних стабильных

services: # Определение сервисов (контейнеров), которые будут запускаться
  db: # Сервис базы данных PostgreSQL
    image: postgres:15 # Используем официальный образ Postgres версии 15
    container_name: instagram_db_container # Имя контейнера в Docker для удобства управления
    restart: unless-stopped # Автоматически перезапускать контейнер, если он упадёт, кроме случаев ручной остановки
    ports:
      - "${POSTGRES_PORT}:5432"
    environment: # Переменные окружения, которые передаются внутрь контейнера, чтобы настроить базу
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    volumes: # Монтируем том для сохранения данных PostgreSQL вне контейнера (чтобы данные не потерялись при пересоздании)
      - pgdata:/var/lib/postgresql/data

  backend:
    build: .
    container_name: instagram_backend_container
    restart: unless-stopped
    ports:
      - "3000:3000" # Порт NestJS приложения наружу (3000)
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: db # Внутреннее имя сервиса базы из этого файла - 'db'
      POSTGRES_PORT: 5432
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      POSTGRES_URI: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DATABASE}?schema=public"
    depends_on:
      - db
    command: ["bun", "run", "dev"] # Или "npm run start:dev" если используешь npm
    volumes:
      - ./:/app # Пробрасываем текущую папку внутрь контейнера, чтобы видеть изменения

volumes:
  pgdata: # Объявляем Docker том с именем pgdata, который будет использоваться для хранения данных базы
