generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User{
  id String @id @default(uuid())
  email String @unique
  fullName String @map("full_name") 
  username String @unique
  password String

  resetToken    String?   @map("reset_token")// токен для сброса пароля
  resetTokenExp DateTime? @map("reset_token_exp")// время истечения токена

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profile Profile? // Связь 1-к-1: Профиль пользователя
  posts Post[]     // Связь 1-ко-многим: Посты пользователя

  likes Like[]  // Связь 1-ко-многим: Лайки, поставленные на посты
  comments Comment[]  // Связь 1-ко-многим: Комментарии, написанные юзером
  commentLikes CommentLike[]   // Связь 1-ко-многим: Лайки, поставленные на комментарии
  notificationsSent     Notification[] @relation("NotificationFromUser") 
  notificationsReceived Notification[] @relation("NotificationToUser")

  followers  Follow[]  @relation("Followers") // кто на меня подписан
  following  Follow[]  @relation("Following") // на кого я подписан
  
  chats     ChatParticipant[]
  messages  Message[]

  @@index([fullName])
  @@map("users")
}

model Profile {
  id     String   @id @default(uuid())
  userId String   @unique  // ID владельца профиля (уникально — 1 юзер = 1 профиль)
  photo String?
  website String?
  about String?

  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)  // Связь 1-к-1 с юзером

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("profiles")
}

model Follow {
  id           String   @id @default(uuid())

  follower     User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)  // Тот, кто подписывается
  followerId   String   @map("follower_id")

  following    User     @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)   // На кого подписываются
  followingId  String   @map("following_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([followerId, followingId]) // нельзя подписаться дважды
  @@map("follows")
}

model Post{
  id String @id @default(uuid())
  text String?
  mediaUrl  String @map("media_url")

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @map("author_id")

  comments Comment[] // Комментарии под постом
  likes Like[]   // Лайки на пост

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("posts")
}

model Comment{
  id String @id @default(uuid())
  text String 

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @map("author_id") // Кто написал комментарий

  post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String  @map("post_id")  // К какому посту относится

  parent    Comment?  @relation("CommentToReplies", fields: [parentId], references: [id], onDelete: Cascade) 
  parentId  String?   @map("parent_id") // Родительский комментарий (если это ответ)

  replies   Comment[] @relation("CommentToReplies")   // Ответы на этот комментарий
  likes     CommentLike[]    // Лайки на комментарий
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     // Кто поставил лайк

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @map("post_id")  // Какому посту

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, postId]) // один юзер — один лайк на один пост
  @@map("likes")
}

model CommentLike {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String    @map("user_id")  // Кто лайкнул комментарий

  comment    Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId  String    @map("comment_id") // Какой комментарий

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, commentId]) // один лайк от юзера на один коммент
  @@map("comment_likes")
}

model Notification {
  id         String      @id @default(uuid())
  type       NotificationType
  fromUserId String @map("from_user_id")
  toUserId   String @map("to_user_id")
  entityType EntityType? @map("entity_type")
  entityId   String?    @map("entity_id") // может быть id поста, комментария и т.п.
  isRead     Boolean  @default(false) @map("is_read") 

  createdAt DateTime @default(now()) @map("created_at")

  fromUser   User @relation("NotificationFromUser", fields: [fromUserId], references: [id], onDelete: Cascade) 
  toUser     User @relation("NotificationToUser", fields: [toUserId], references: [id], onDelete: Cascade)

  @@index([toUserId, isRead])       // индекс для быстрого поиска непрочитанных уведомлений у пользователя
  @@index([toUserId, createdAt])    // индекс для сортировки уведомлений по дате у пользователя
}

model Chat {
  id        String      @id @default(uuid())
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  lastMessageAt DateTime? @map("last_message_at") 

  participants ChatParticipant[]
  messages     Message[]

  @@map("chats")
}

model ChatParticipant {
  id        String   @id @default(uuid())
  userId    String   
  chatId    String   @map("chat_id")

  deletedAt DateTime? @map("deleted_at")
  deleted   Boolean  @default(false)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
  @@map("chat_participants")
}

model Message {
  id         String   @id @default(uuid())
  chatId     String @map("chat_id")
  senderId   String @map("sender_id")
  text       String
  isRead     Boolean  @default(false) @map("is_read")
  
  createdAt DateTime @default(now()) @map("created_at")

  chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender     User     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum NotificationType {
  LIKE
  COMMENT
  REPLY
  FOLLOW
  POST
}
enum EntityType {
  POST
  COMMENT
  NONE
}